generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String    @id @default(cuid())
  name             String?
  email            String    @unique
  emailVerified    DateTime?
  image            String?
  businessType     String?   // restaurant, gym, salon, contractor, tutor, other
  businessName     String?
  onboardingStep   Int       @default(0)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  accounts         Account[]
  sessions         Session[]
  contacts         Contact[]
  campaigns        Campaign[]
  segments         Segment[]
  subscription     Subscription?
  templates        Template[]
  emailSettings    EmailSettings?
  supportTickets   SupportTicket[]
}

model Subscription {
  id               String   @id @default(cuid())
  userId           String   @unique
  plan             String   // free, pro
  status           String   // active, cancelled, past_due, trialing
  stripeCustomerId String?  @unique
  stripePriceId    String?
  stripeSubscriptionId String? @unique
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Contact {
  id           String   @id @default(cuid())
  userId       String
  email        String
  firstName    String?
  lastName     String?
  phone        String?
  tags         String[] // Array of tag names
  customFields Json?    // Flexible key-value pairs
  status       String   @default("subscribed") // subscribed, unsubscribed, bounced, complained
  source       String   @default("manual") // manual, mailchimp_import, csv_import, api
  listSource   String?  // Original list name from import
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  segmentContacts   SegmentContact[]
  campaignRecipients CampaignRecipient[]

  @@unique([userId, email])
  @@index([userId, status])
  @@index([userId, tags])
}

model Segment {
  id          String   @id @default(cuid())
  userId      String
  name        String
  description String?
  conditions  Json     // Segment rules as JSON
  contactCount Int     @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user     User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts SegmentContact[]
  campaigns Campaign[]

  @@index([userId])
}

model SegmentContact {
  segmentId String
  contactId String
  createdAt DateTime @default(now())

  segment Segment @relation(fields: [segmentId], references: [id], onDelete: Cascade)
  contact Contact @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@id([segmentId, contactId])
}

model Template {
  id          String   @id @default(cuid())
  userId      String?  // null for system templates
  name        String
  description String?
  category    String   // restaurant, gym, salon, contractor, tutor, general
  content     Json     // Email builder JSON structure
  htmlContent String?  @db.Text // Rendered HTML
  thumbnail   String?  // Base64 or URL
  isSystem    Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  campaigns Campaign[]

  @@index([category, isSystem])
  @@index([userId])
}

model Campaign {
  id          String   @id @default(cuid())
  userId      String
  name        String
  subject     String
  previewText String?
  content     Json     // Email builder JSON
  htmlContent String?  @db.Text // Rendered HTML
  templateId  String?
  segmentId   String?
  status      String   @default("draft") // draft, scheduled, sending, sent, paused, cancelled
  scheduledAt DateTime?
  sentAt      DateTime?
  type        String   @default("campaign") // campaign, automation
  fromName    String?
  fromEmail   String?
  replyTo     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user       User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  template   Template?           @relation(fields: [templateId], references: [id])
  segment    Segment?            @relation(fields: [segmentId], references: [id])
  recipients CampaignRecipient[]
  analytics  CampaignAnalytics?

  @@index([userId, status])
  @@index([scheduledAt])
}

model CampaignRecipient {
  id         String   @id @default(cuid())
  campaignId String
  contactId  String
  status     String   @default("pending") // pending, sent, delivered, opened, clicked, bounced, complained, unsubscribed
  sentAt     DateTime?
  deliveredAt DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  bouncedAt  DateTime?
  unsubscribedAt DateTime?
  errorMessage String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  contact  Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)

  @@unique([campaignId, contactId])
  @@index([campaignId, status])
}

model CampaignAnalytics {
  id                String @id @default(cuid())
  campaignId        String @unique
  totalSent         Int    @default(0)
  totalDelivered    Int    @default(0)
  totalOpened       Int    @default(0)
  totalClicked      Int    @default(0)
  totalBounced      Int    @default(0)
  totalUnsubscribed Int    @default(0)
  totalComplained   Int    @default(0)
  uniqueOpened      Int    @default(0)
  uniqueClicked     Int    @default(0)
  openRate          Float  @default(0)
  clickRate         Float  @default(0)
  bounceRate        Float  @default(0)
  unsubscribeRate   Float  @default(0)
  updatedAt         DateTime @updatedAt

  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

model EmailSettings {
  id           String @id @default(cuid())
  userId       String @unique
  fromName     String @default("Your Business")
  fromEmail    String?
  replyTo      String?
  customDomain String?
  trackOpens   Boolean @default(true)
  trackClicks  Boolean @default(true)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  subject     String
  message     String   @db.Text
  status      String   @default("open") // open, in_progress, resolved, closed
  priority    String   @default("medium") // low, medium, high, urgent
  adminReply  String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
}

model WebhookEvent {
  id        String   @id @default(cuid())
  provider  String   // stripe, mailersend, etc
  eventType String
  eventId   String   @unique
  data      Json
  processed Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([provider, eventType])
  @@index([processed])
}
